
class BGCEffect {

    /**
     * @param {Object} element 
     */
    constructor ( element ) {

        if ( element ) {

            this.element = element

        } else {

            if ( document && document.body ) {

                this.element = document.body

            } else {

                this.element = null

            }

        }
        
        this.usedColors = {} 
        this._checkElement()

    }

    /**
     * @param {number} duration 
     */
    start ( duration = 10 ) {

        if ( this._checkElement ( ) )
        
            this._colorEffect( Math.abs( duration ), this.element )


    }

    /**
     * @param {number} duration 
     * @param {Object} element 
     */
    _colorEffect( duration, element ) {

        let color = this._randomColor()
        
        while ( this._colorIsUsed( color ) )

            color = this._randomColor()


        element.style.backgroundColor = color
        this.usedColors[ color ] = true

        if ( duration > 0 )

            setTimeout( ()=> { this._colorEffect( duration -1, element ) }, 1000 )

    }

    _randomColor ( ) {

        let rgb = [ 0, 0, 0 ].map( c => Math.floor( Math.random() * 255 ) )

        return `rgb(${rgb.join(",")})`

    }

    /**
     * @param {number} color 
     */
    _colorIsUsed ( color ) {

        return this.usedColors[ color ] !== undefined

    }

    _checkElement ( ) {

        if ( !this.element ) {
            
            console.error("No element supplied to BGCEffect")
            return false
                    
        }

        return true

    }

}

module.exports = BGCEffect